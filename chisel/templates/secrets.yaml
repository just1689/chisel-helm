{{- if or (eq .Values.mode "server") .Values.args.auth .Values.args.fingerprint .Values.credentials }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "chisel.fullname" . }}-secret
  labels:
    {{- include "chisel.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
 {{- if eq .Values.mode "server"}}
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (print (include "chisel.fullname" . ) "-secret")) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- range $k, $v := $secretData }}
   {{- $_ := set $secretData $k ($v | b64dec) -}}
  {{- end }}
  # set $key either from args.key, existing secret data or generate a random one when not exists
  key: {{ (coalesce .Values.args.key (get $secretData "key") | default (randAscii 32)) | b64enc }}
 {{- else }}{{- /* if eq .Values.mode "server" */}}
  {{- if and .Values.credentials .Values.credentials.user .Values.credentials.password }}
  auth: {{ printf "%s:%s" .Values.credentials.user .Values.credentials.password | b64enc }}
  {{- end }}
  {{- if .Values.args.fingerprint }}
  fingerprint: {{ .Values.args.fingerprint | b64enc }}
  {{- end }}
 {{- end -}}{{- /* if eq .Values.mode "server" */}}
{{- end -}}{{- /* global if */}}